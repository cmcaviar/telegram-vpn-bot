import datetime
import pytz


CONFIG = {}

class User:
    def __init__(self):
        self.id = None
        self.tgid = None
        self.subscription = None
        self.trial_subscription = True
        self.registered = False
        self.username = None
        self.fullname = None

    @classmethod
    async def GetInfo(cls, pool, tgid):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ Telegram ID."""
        self = User()
        self.tgid = tgid
        async with pool.acquire() as conn:
            log = await conn.fetchrow("SELECT * FROM userss WHERE tgid=$1", tgid)

        if log:
            self.id = log["id"]
            self.subscription = log["subscription"]
            self.trial_subscription = log["banned"]
            self.registered = True
            self.username = log["username"]
            self.fullname = log["fullname"]
        else:
            self.registered = False

        return self

    async def PaymentInfo(self, pool):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        async with pool.acquire() as conn:
            log = await conn.fetchrow("SELECT * FROM payments WHERE tgid=$1", self.tgid)
            return log

    async def CancelPayment(self, pool):
        """–£–¥–∞–ª—è–µ—Ç –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        async with pool.acquire() as conn:
            await conn.execute("DELETE FROM payments WHERE tgid=$1", self.tgid)

    async def NewPay(self, pool, bill_id, summ, time_to_add, mesid):
        """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
        pay_info = await self.PaymentInfo(pool)
        if pay_info is None:
            async with pool.acquire() as conn:
                await conn.execute(
                    """INSERT INTO payments (tgid, bill_id, amount, time_to_add, mesid) 
                    VALUES ($1, $2, $3, $4, $5)
                    ON CONFLICT (tgid) DO NOTHING;""",
                    self.tgid, str(bill_id), summ, int(time_to_add), str(mesid)
                )

    async def GetAllPaymentsInWork(self, pool):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏."""
        async with pool.acquire() as conn:
            return await conn.fetch("SELECT * FROM payments")

    async def Adduser(self, pool, username, full_name):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        MOSCOW_TZ = pytz.timezone("Europe/Moscow")

        if not self.registered:
            trial_days = int(CONFIG['trial_period'])

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ UTC+3
            subscription_expires = datetime.datetime.now(pytz.utc).astimezone(MOSCOW_TZ) + datetime.timedelta(
                days=trial_days)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ offset-naive (–±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞) –¥–ª—è PostgreSQL
            subscription_expires = subscription_expires.replace(tzinfo=None)

            print(f"üÜï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.tgid}")
            print(f"üë§ –õ–æ–≥–∏–Ω: {username}, –ò–º—è: {full_name}")
            print(f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ {subscription_expires.strftime('%d.%m.%Y %H:%M')} –ú–°–ö")

            async with pool.acquire() as conn:
                await conn.execute(
                    """INSERT INTO userss (tgid, subscription, username, fullname) 
                    VALUES ($1, $2, $3, $4)
                    ON CONFLICT (tgid) DO NOTHING;""",
                    self.tgid, subscription_expires, username, full_name
                )

            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.tgid} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!")

            self.registered = True

    async def GetAllUsers(self, pool):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        async with pool.acquire() as conn:
            return await conn.fetch("SELECT * FROM userss")

    async def GetAllUsersWithSub(self, pool):
        MOSCOW_TZ = pytz.timezone("Europe/Moscow")
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π."""
        async with pool.acquire() as conn:
            return await conn.fetch(
                "SELECT * FROM userss WHERE subscription > $1",
                datetime.datetime.now(pytz.utc).astimezone(MOSCOW_TZ)
            )

    async def GetAllUsersWithoutSub(self, pool):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏."""
        async with pool.acquire() as conn:
            return await conn.fetch("SELECT * FROM userss WHERE banned = TRUE AND username <> '@None'")


    async def grant_vpn_access(self, pool, tgid: int, days: int):
        MOSCOW_TZ = pytz.timezone("Europe/Moscow")
        """–í—ã–¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ VPN –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π."""
        self = User()
        self.tgid = tgid

        now_moscow = datetime.datetime.now(pytz.utc).astimezone(MOSCOW_TZ)
        sub_promo_end = (now_moscow + datetime.timedelta(days=days)).replace(tzinfo=None)

        print(f"‚úÖ –í—ã–¥–∞—á–∞ VPN-–¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tgid}")
        print(f"üìÖ –î–æ—Å—Ç—É–ø –¥–æ: {sub_promo_end.strftime('%d.%m.%Y %H:%M')} –ú–°–ö")

        async with pool.acquire() as conn:
            await conn.execute(
                "UPDATE userss SET sub_promo_end = $1 WHERE tgid = $2",
                sub_promo_end, tgid
            )

        print(f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tgid} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç VPN-–¥–æ—Å—Ç—É–ø –¥–æ {sub_promo_end.strftime('%d.%m.%Y %H:%M')} –ú–°–ö")

    async def revoke_vpn_access(self, pool, tgid: int):
        MOSCOW_TZ = pytz.timezone("Europe/Moscow")
        """–û—Ç–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ VPN –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ."""
        self = User()
        self.tgid = tgid

        now_moscow = datetime.datetime.now(pytz.utc).astimezone(MOSCOW_TZ)

        print(f"‚ùå –û—Ç–∑—ã–≤ VPN-–¥–æ—Å—Ç—É–ø–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tgid}")
        print(f"‚è≥ –î–æ—Å—Ç—É–ø –ø—Ä–µ–∫—Ä–∞—â–µ–Ω –≤: {now_moscow.strftime('%d.%m.%Y %H:%M')} –ú–°–ö")

        async with pool.acquire() as conn:
            await conn.execute(
                "UPDATE userss SET sub_promo_end = $1 WHERE tgid = $2",
                now_moscow, tgid
            )

        print(f"üîí –î–æ—Å—Ç—É–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tgid} —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω!")

    async def get_subscription_channels(pool):
        async with pool.acquire() as conn:
            return await conn.fetch("SELECT * FROM channels")

    async def AddChannels(pool, channel_id, name, invite_link):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        async with pool.acquire() as conn:
            await conn.execute(
               """INSERT INTO channels (channel_id, name, invite_link) 
                    VALUES ($1, $2, $3)
                    ON CONFLICT (channel_id) DO NOTHING;""",
                    channel_id, name, invite_link
                )

    async def DeleteChannels(pool):
        async with pool.acquire() as conn:
            await conn.execute(
               "DELETE FROM channels;")

    async def GetChannelByName(pool, name):
        async with pool.acquire() as conn:
            return await conn.fetch("SELECT * FROM channels WHERE name = $1", name)

    async def DeleteChannelByName(pool, name):
        async with pool.acquire() as conn:
            return await conn.execute("DELETE FROM channels WHERE name = $1", name)

    async def CheckNewNickname(self, pool, message):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞ –∏ –∏–º–µ–Ω–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            username = "@" + str(message.from_user.username)
        except:
            username = str(message.from_user.id)

        if message.from_user.full_name != self.fullname or username != self.username:
            async with pool.acquire() as conn:
                await conn.execute(
                    "UPDATE userss SET username = $1, fullname = $2 WHERE id = $3",
                    username, message.from_user.full_name, self.id
                )